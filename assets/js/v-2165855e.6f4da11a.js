(self.webpackChunkknowledge=self.webpackChunkknowledge||[]).push([[1732],{12:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-2165855e",path:"/Swift/ReferenceManual/Expressions.html",title:"表达式",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"前缀表达式",slug:"前缀表达式",children:[{level:3,title:"输入输出表达式",slug:"输入输出表达式",children:[]},{level:3,title:"try 运算符",slug:"try-运算符",children:[]},{level:3,title:"await 运算符",slug:"await-运算符",children:[]}]},{level:2,title:"二元表达式",slug:"二元表达式",children:[{level:3,title:"赋值表达式",slug:"赋值表达式",children:[]},{level:3,title:"条件运算符",slug:"条件运算符",children:[]},{level:3,title:"类型转换运算符",slug:"类型转换运算符",children:[]}]},{level:2,title:"基本表达式",slug:"基本表达式",children:[{level:3,title:"字面量表达式",slug:"字面量表达式",children:[]},{level:3,title:"self表达式",slug:"self表达式",children:[]},{level:3,title:"super表达式",slug:"super表达式",children:[]},{level:3,title:"闭包表达式",slug:"闭包表达式",children:[]}]}],filePathRelative:"Swift/ReferenceManual/Expressions.md",git:{updatedTime:1639562133e3,contributors:[]}}},7949:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h1 id="表达式" tabindex="-1"><a class="header-anchor" href="#表达式" aria-hidden="true">#</a> 表达式</h1><h2 id="前缀表达式" tabindex="-1"><a class="header-anchor" href="#前缀表达式" aria-hidden="true">#</a> 前缀表达式</h2><h3 id="输入输出表达式" tabindex="-1"><a class="header-anchor" href="#输入输出表达式" aria-hidden="true">#</a> 输入输出表达式</h3><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function">increase</span><span class="token punctuation">(</span><span class="token number">_</span> variable<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    variable <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> variable <span class="token operator">=</span> <span class="token number">0</span>\n\n<span class="token function">increase</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>variable<span class="token punctuation">)</span> <span class="token comment">// 输入输出表达式</span>\n\n<span class="token function">print</span><span class="token punctuation">(</span>variable<span class="token punctuation">)</span> <span class="token comment">// 1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="try-运算符" tabindex="-1"><a class="header-anchor" href="#try-运算符" aria-hidden="true">#</a> try 运算符</h3><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function">makeError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token function">NSError</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>\n    <span class="token keyword">try</span> <span class="token function">makeError</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> result<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> <span class="token function">makeError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// nil</span>\n\n<span class="token keyword">let</span> result<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">!</span> <span class="token function">makeError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// EXC_BAD_INSTRUCTION</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="await-运算符" tabindex="-1"><a class="header-anchor" href="#await-运算符" aria-hidden="true">#</a> await 运算符</h3><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> async <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>\n    await <span class="token builtin">Task</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1_000_000_000</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token number">1</span>\n<span class="token punctuation">}</span>\n\n<span class="token builtin">Task</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> n <span class="token operator">=</span> await <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="二元表达式" tabindex="-1"><a class="header-anchor" href="#二元表达式" aria-hidden="true">#</a> 二元表达式</h2><h3 id="赋值表达式" tabindex="-1"><a class="header-anchor" href="#赋值表达式" aria-hidden="true">#</a> 赋值表达式</h3><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span>\n\n<span class="token keyword">let</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="条件运算符" tabindex="-1"><a class="header-anchor" href="#条件运算符" aria-hidden="true">#</a> 条件运算符</h3><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">let</span> bool <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">randomElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="类型转换运算符" tabindex="-1"><a class="header-anchor" href="#类型转换运算符" aria-hidden="true">#</a> 类型转换运算符</h3><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token function">NSString</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">let</span> object <span class="token operator">=</span> string <span class="token keyword">as</span> <span class="token builtin">NSObject</span> <span class="token comment">// 向上转换</span>\n<span class="token keyword">let</span> str <span class="token operator">=</span> object <span class="token keyword">as</span><span class="token operator">?</span> <span class="token builtin">NSString</span> <span class="token comment">// 向下转换</span>\n\n<span class="token keyword">let</span> num <span class="token operator">=</span> object <span class="token keyword">as</span><span class="token operator">?</span> <span class="token builtin">NSNumber</span> <span class="token comment">// nil</span>\n<span class="token keyword">let</span> num <span class="token operator">=</span> object <span class="token keyword">as</span><span class="token operator">!</span> <span class="token builtin">NSNumber</span> <span class="token comment">// signal SIGABRT</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token string">&quot;String&quot;</span>\n<span class="token keyword">let</span> nsString <span class="token operator">=</span> <span class="token function">NSString</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string">&quot;NSString&quot;</span><span class="token punctuation">)</span>\n\n<span class="token keyword">let</span> nsStr<span class="token punctuation">:</span> <span class="token builtin">NSString</span> <span class="token operator">=</span> string <span class="token keyword">as</span> <span class="token builtin">NSString</span> <span class="token comment">// Swift标准库类型与Foundation基础库类型的桥接</span>\n<span class="token keyword">let</span> str<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> nsString <span class="token keyword">as</span> <span class="token builtin">String</span>\n\n<span class="token keyword">let</span> nsStr<span class="token punctuation">:</span> <span class="token builtin">NSString</span> <span class="token operator">=</span> <span class="token function">NSString</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> string<span class="token punctuation">)</span>\n<span class="token keyword">let</span> str<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>nsString<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="基本表达式" tabindex="-1"><a class="header-anchor" href="#基本表达式" aria-hidden="true">#</a> 基本表达式</h2><h3 id="字面量表达式" tabindex="-1"><a class="header-anchor" href="#字面量表达式" aria-hidden="true">#</a> 字面量表达式</h3><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code>#file\n#filePath\n#fileID\n#line\n#column\n#function\n#dsohandle\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\n\n<span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="self表达式" tabindex="-1"><a class="header-anchor" href="#self表达式" aria-hidden="true">#</a> self表达式</h3><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">struct</span> <span class="token builtin">SomeStruct</span> <span class="token punctuation">{</span>\n    <span class="token keyword">func</span> <span class="token function">instanceMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 在实例方法中self指代当前实例</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">instanceMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 在静态方法中self指代当前类型，与Self相同</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token keyword">Self</span><span class="token punctuation">.</span><span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">struct</span> <span class="token builtin">SomeStruct</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> property<span class="token punctuation">:</span> <span class="token builtin">Int</span>\n    \n    <span class="token keyword">init</span><span class="token punctuation">(</span>property<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span>property <span class="token operator">=</span> property\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>property<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="super表达式" tabindex="-1"><a class="header-anchor" href="#super表达式" aria-hidden="true">#</a> super表达式</h3><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">class</span> <span class="token class-name">Super</span> <span class="token punctuation">{</span>\n    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        \n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Child</span><span class="token punctuation">:</span> <span class="token builtin">Super</span> <span class="token punctuation">{</span>\n    <span class="token keyword">override</span> <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="闭包表达式" tabindex="-1"><a class="header-anchor" href="#闭包表达式" aria-hidden="true">#</a> 闭包表达式</h3><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function">closure</span><span class="token punctuation">(</span>block<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">block</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\nclosure <span class="token punctuation">{</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">Int</span> <span class="token keyword">in</span>\n    <span class="token keyword">return</span> x <span class="token operator">+</span> y\n<span class="token punctuation">}</span>\n\nclosure <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span>\n    x <span class="token operator">+</span> y\n<span class="token punctuation">}</span>\n\nclosure <span class="token punctuation">{</span>\n    $<span class="token number">0</span> <span class="token operator">+</span> $<span class="token number">1</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>',27),e={render:function(n,s){return p}}}}]);
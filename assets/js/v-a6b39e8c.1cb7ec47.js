(self.webpackChunkknowledge=self.webpackChunkknowledge||[]).push([[3436],{755:(e,r,a)=>{"use strict";a.r(r),a.d(r,{data:()=>l});const l={key:"v-a6b39e8c",path:"/CS/AsynchronyProgramming.html",title:"异步编程",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"背景概念",slug:"背景概念",children:[{level:3,title:"处理器(Central Processing Unit)",slug:"处理器-central-processing-unit",children:[]},{level:3,title:"任务调度",slug:"任务调度",children:[]}]},{level:2,title:"并发(Concurrency)",slug:"并发-concurrency",children:[]},{level:2,title:"并行(Parallelism)",slug:"并行-parallelism",children:[]},{level:2,title:"数据竞争",slug:"数据竞争",children:[]}],filePathRelative:"CS/AsynchronyProgramming.md",git:{updatedTime:1642676489e3,contributors:[]}}},9603:(e,r,a)=>{"use strict";a.r(r),a.d(r,{default:()=>i});const l=(0,a(6252).uE)('<h1 id="异步编程" tabindex="-1"><a class="header-anchor" href="#异步编程" aria-hidden="true">#</a> 异步编程</h1><h2 id="背景概念" tabindex="-1"><a class="header-anchor" href="#背景概念" aria-hidden="true">#</a> 背景概念</h2><h3 id="处理器-central-processing-unit" tabindex="-1"><a class="header-anchor" href="#处理器-central-processing-unit" aria-hidden="true">#</a> 处理器(Central Processing Unit)</h3><ul><li><h4 id="单核处理器-single-core-processor" tabindex="-1"><a class="header-anchor" href="#单核处理器-single-core-processor" aria-hidden="true">#</a> 单核处理器(Single-core processor)</h4></li><li><h4 id="多核处理器-multi-core-processor" tabindex="-1"><a class="header-anchor" href="#多核处理器-multi-core-processor" aria-hidden="true">#</a> 多核处理器(Multi-core processor)</h4></li></ul><h3 id="任务调度" tabindex="-1"><a class="header-anchor" href="#任务调度" aria-hidden="true">#</a> 任务调度</h3><ul><li><h4 id="线程-thread" tabindex="-1"><a class="header-anchor" href="#线程-thread" aria-hidden="true">#</a> 线程(Thread)</h4><ol><li>线程是进程的一部分</li><li>多线程间共享进程资源</li></ol></li><li><h4 id="进程-process" tabindex="-1"><a class="header-anchor" href="#进程-process" aria-hidden="true">#</a> 进程(Process)</h4><ol><li>进程由多个线程组成</li><li>多进程间资源独立</li></ol></li></ul><h2 id="并发-concurrency" tabindex="-1"><a class="header-anchor" href="#并发-concurrency" aria-hidden="true">#</a> 并发(Concurrency)</h2><ul><li>并发指逻辑结构</li><li>多任务中的每一任务无需等待上一个任务完成才能开始</li><li>多个任务不一定同时执行</li><li>异步编程无需关心程序执行状态是否并行，只需要设计出逻辑结构是并发的程序即可</li></ul><h2 id="并行-parallelism" tabindex="-1"><a class="header-anchor" href="#并行-parallelism" aria-hidden="true">#</a> 并行(Parallelism)</h2><ul><li>并行指执行状态</li><li>多个任务同时执行</li><li>多核处理器可能并行执行并发程序；单核处理器进行多任务轮转造成并发程序并行执行的假象</li></ul><h2 id="数据竞争" tabindex="-1"><a class="header-anchor" href="#数据竞争" aria-hidden="true">#</a> 数据竞争</h2>',11),i={render:function(e,r){return l}}}}]);
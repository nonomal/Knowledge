(self.webpackChunkknowledge=self.webpackChunkknowledge||[]).push([[3426],{1196:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-1110451d",path:"/iOS/UnsafePointer.html",title:"Swift 指针",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"UnsafePointer | const *",slug:"unsafepointer-const",children:[]},{level:2,title:"UnsafeMutablePointer | *",slug:"unsafemutablepointer",children:[]},{level:2,title:"UnsafeBufferPointer | const * []",slug:"unsafebufferpointer-const",children:[]},{level:2,title:"UnsafeMutableBufferPointer | * []",slug:"unsafemutablebufferpointer",children:[]},{level:2,title:"UnsafeRawPointer | const void *",slug:"unsaferawpointer-const-void",children:[]},{level:2,title:"UnsafeMutableRawPointer | void *",slug:"unsafemutablerawpointer-void",children:[]},{level:2,title:"allocate(capacity:) deallocate() | malloc() free()",slug:"allocate-capacity-deallocate-malloc-free",children:[]},{level:2,title:"MemoryLayout | sizeof()",slug:"memorylayout-sizeof",children:[{level:3,title:"内存对齐",slug:"内存对齐",children:[]}]},{level:2,title:"Unmanaged",slug:"unmanaged",children:[]},{level:2,title:"函数指针",slug:"函数指针",children:[{level:3,title:"普通闭包",slug:"普通闭包",children:[]},{level:3,title:"void *任意类型函数指针闭包",slug:"void-任意类型函数指针闭包",children:[]}]}],filePathRelative:"iOS/UnsafePointer.md",git:{updatedTime:1642670075e3,contributors:[]}}},1502:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="swift-指针" tabindex="-1"><a class="header-anchor" href="#swift-指针" aria-hidden="true">#</a> Swift 指针</h1><h2 id="unsafepointer-const" tabindex="-1"><a class="header-anchor" href="#unsafepointer-const" aria-hidden="true">#</a> UnsafePointer | const *</h2><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">3</span>\n<span class="token function">withUnsafePointer</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span> p <span class="token keyword">in</span>\n    <span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>pointee<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>\n<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="unsafemutablepointer" tabindex="-1"><a class="header-anchor" href="#unsafemutablepointer" aria-hidden="true">#</a> UnsafeMutablePointer | *</h2><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span>\n<span class="token function">withUnsafeMutablePointer</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span> p <span class="token keyword">in</span>\n    p<span class="token punctuation">.</span>pointee <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>\n<span class="token punctuation">}</span>\n<span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>\n<span class="token operator">*</span>p <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="unsafebufferpointer-const" tabindex="-1"><a class="header-anchor" href="#unsafebufferpointer-const" aria-hidden="true">#</a> UnsafeBufferPointer | const * []</h2><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>\na<span class="token punctuation">.</span>withUnsafeBufferPointer <span class="token punctuation">{</span> p <span class="token keyword">in</span>\n    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token number">3</span> <span class="token punctuation">{</span>\n        <span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> a<span class="token punctuation">;</span>\n\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    p <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="unsafemutablebufferpointer" tabindex="-1"><a class="header-anchor" href="#unsafemutablebufferpointer" aria-hidden="true">#</a> UnsafeMutableBufferPointer | * []</h2><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>\na<span class="token punctuation">.</span>withUnsafeMutableBufferPointer <span class="token punctuation">{</span> p <span class="token keyword">in</span>\n    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token number">3</span> <span class="token punctuation">{</span>\n        p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">3</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> a<span class="token punctuation">;</span>\n\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">*</span>p <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>\n    p <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\np <span class="token operator">=</span> a<span class="token punctuation">;</span>\n\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    p <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="unsaferawpointer-const-void" tabindex="-1"><a class="header-anchor" href="#unsaferawpointer-const-void" aria-hidden="true">#</a> UnsafeRawPointer | const void *</h2><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">3</span>\n<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token string">&quot;c&quot;</span>\n\n<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token function">withUnsafePointer</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> a<span class="token punctuation">,</span> <span class="token builtin">UnsafeRawPointer</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">)</span>\n\n<span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">assumingMemoryBound</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pointee<span class="token punctuation">)</span>\n\np <span class="token operator">=</span> <span class="token function">withUnsafePointer</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> c<span class="token punctuation">,</span> <span class="token builtin">UnsafeRawPointer</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">)</span>\n\n<span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">assumingMemoryBound</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pointee<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>\n<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>\np <span class="token operator">=</span> <span class="token operator">&amp;</span>c<span class="token punctuation">;</span>\n<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="unsafemutablerawpointer-void" tabindex="-1"><a class="header-anchor" href="#unsafemutablerawpointer-void" aria-hidden="true">#</a> UnsafeMutableRawPointer | void *</h2><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span>\n<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token string">&quot;0&quot;</span>\n\n<span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token function">withUnsafeMutablePointer</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token builtin">UnsafeMutableRawPointer</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">)</span>\n\np<span class="token punctuation">.</span><span class="token function">assumingMemoryBound</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pointee <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>\n\n<span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n\np <span class="token operator">=</span> <span class="token function">withUnsafeMutablePointer</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token builtin">UnsafeMutableRawPointer</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">)</span>\n\np<span class="token punctuation">.</span><span class="token function">assumingMemoryBound</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pointee <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span>\n\n<span class="token function">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">void</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>\n<span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>p <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>\np <span class="token operator">=</span> <span class="token operator">&amp;</span>c<span class="token punctuation">;</span>\n<span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">;</span>\n<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c\\n&quot;</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="allocate-capacity-deallocate-malloc-free" tabindex="-1"><a class="header-anchor" href="#allocate-capacity-deallocate-malloc-free" aria-hidden="true">#</a> allocate(capacity:) deallocate() | malloc() free()</h2><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token builtin">UnsafeMutablePointer</span><span class="token operator">&lt;</span><span class="token builtin">Int</span><span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>capacity<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>\np<span class="token punctuation">.</span>pointee <span class="token operator">=</span> <span class="token number">3</span>\n<span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>pointee<span class="token punctuation">)</span>\np<span class="token punctuation">.</span><span class="token function">deallocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="memorylayout-sizeof" tabindex="-1"><a class="header-anchor" href="#memorylayout-sizeof" aria-hidden="true">#</a> MemoryLayout | sizeof()</h2><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token builtin">MemoryLayout</span><span class="token operator">&lt;</span><span class="token builtin">CChar</span><span class="token operator">&gt;</span><span class="token punctuation">.</span>size\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="内存对齐" tabindex="-1"><a class="header-anchor" href="#内存对齐" aria-hidden="true">#</a> 内存对齐</h3><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">struct</span> T <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> a<span class="token punctuation">:</span> <span class="token builtin">Int32</span>\n    <span class="token keyword">var</span> b<span class="token punctuation">:</span> <span class="token builtin">CChar</span>\n    <span class="token keyword">var</span> c<span class="token punctuation">:</span> <span class="token builtin">CChar</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">MemoryLayout</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token comment">// 4 + 1 + 1</span>\n<span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">MemoryLayout</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">.</span>alignment<span class="token punctuation">)</span> <span class="token comment">// 4</span>\n<span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">MemoryLayout</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token builtin">stride</span><span class="token punctuation">)</span> <span class="token comment">// 4 + [(1 + 1) -&gt; 4]</span>\n\n\n<span class="token keyword">struct</span> T <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> b<span class="token punctuation">:</span> <span class="token builtin">CChar</span>\n    <span class="token keyword">var</span> a<span class="token punctuation">:</span> <span class="token builtin">Int32</span>\n    <span class="token keyword">var</span> c<span class="token punctuation">:</span> <span class="token builtin">CChar</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">MemoryLayout</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token comment">// [1 -&gt; 4] + 4 + 1</span>\n<span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">MemoryLayout</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">.</span>alignment<span class="token punctuation">)</span> <span class="token comment">// 4</span>\n<span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">MemoryLayout</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token builtin">stride</span><span class="token punctuation">)</span> <span class="token comment">// [1 -&gt; 4] + 4 + [1 -&gt; 4]</span>\n\n\n<span class="token keyword">struct</span> T <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> b<span class="token punctuation">:</span> <span class="token builtin">CChar</span>\n    <span class="token keyword">var</span> c<span class="token punctuation">:</span> <span class="token builtin">CChar</span>\n    <span class="token keyword">var</span> a<span class="token punctuation">:</span> <span class="token builtin">Int32</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">MemoryLayout</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token comment">// [(1 + 1) -&gt; 4] + 4</span>\n<span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">MemoryLayout</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">.</span>alignment<span class="token punctuation">)</span> <span class="token comment">// 4</span>\n<span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">MemoryLayout</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token builtin">stride</span><span class="token punctuation">)</span> <span class="token comment">// [(1 + 1) -&gt; 4] + 4</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">T</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> a<span class="token punctuation">;</span>\n    <span class="token keyword">char</span> b<span class="token punctuation">;</span>\n    <span class="token keyword">char</span> c<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%lu\\n&quot;</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="unmanaged" tabindex="-1"><a class="header-anchor" href="#unmanaged" aria-hidden="true">#</a> Unmanaged</h2><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">class</span> <span class="token class-name">SomeClass</span> <span class="token punctuation">{</span>\n    \n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> printAddress<span class="token operator">&lt;</span>T<span class="token punctuation">:</span> <span class="token builtin">AnyObject</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">_</span> object<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token comment">//    print(String(unsafeBitCast(object, to: Int.self), radix: 16, uppercase: false))</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token builtin">Unmanaged</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">passUnretained</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toOpaque</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">printAddress</span><span class="token punctuation">(</span><span class="token function">SomeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 打印对象内存地址</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="函数指针" tabindex="-1"><a class="header-anchor" href="#函数指针" aria-hidden="true">#</a> 函数指针</h2><h3 id="普通闭包" tabindex="-1"><a class="header-anchor" href="#普通闭包" aria-hidden="true">#</a> 普通闭包</h3><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token comment">//void someMethod(void (*block)(int)) {</span>\n<span class="token comment">//    block(1);</span>\n<span class="token comment">//}</span>\n\n<span class="token comment">// 与C混编时C风格闭包会自动转换为Swift风格闭包</span>\nsomeMethod <span class="token punctuation">{</span> x <span class="token keyword">in</span>\n    <span class="token function">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>block<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">block</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">void</span> <span class="token function">closure</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">someMethod</span><span class="token punctuation">(</span>closure<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="void-任意类型函数指针闭包" tabindex="-1"><a class="header-anchor" href="#void-任意类型函数指针闭包" aria-hidden="true">#</a> void *任意类型函数指针闭包</h3><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token comment">//void someMethod(const void *block) {</span>\n<span class="token comment">//    printf(&quot;%p\\n&quot;, block);</span>\n<span class="token comment">//}</span>\n<span class="token comment">//</span>\n<span class="token comment">//void closure(int x) {</span>\n<span class="token comment">//    printf(&quot;%d\\n&quot;, x);</span>\n<span class="token comment">//}</span>\n\n<span class="token keyword">let</span> c_func<span class="token punctuation">:</span> @<span class="token function">convention</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">Int32</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">Void</span> <span class="token operator">=</span> closure\n<span class="token keyword">let</span> c_func_ptr <span class="token operator">=</span> <span class="token function">unsafeBitCast</span><span class="token punctuation">(</span>c_func<span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token builtin">UnsafeRawPointer</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span>\n<span class="token function">someMethod</span><span class="token punctuation">(</span>c_func_ptr<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>block<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%p\\n&quot;</span><span class="token punctuation">,</span> block<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">void</span> <span class="token function">closure</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">someMethod</span><span class="token punctuation">(</span>closure<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',37),t={render:function(n,s){return p}}}}]);
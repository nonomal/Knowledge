(self.webpackChunkknowledge=self.webpackChunkknowledge||[]).push([[2036],{5945:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-48e9fee5",path:"/iOS/Algorithm.html",title:"算法",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1. 时间复杂度",slug:"_1-时间复杂度",children:[{level:3,title:"时间频度",slug:"时间频度",children:[]},{level:3,title:"时间复杂度 O(n)",slug:"时间复杂度-o-n",children:[]}]},{level:2,title:"2. 空间复杂度",slug:"_2-空间复杂度",children:[]},{level:2,title:"3. 排序算法",slug:"_3-排序算法",children:[{level:3,title:"冒泡",slug:"冒泡",children:[]},{level:3,title:"选择",slug:"选择",children:[]},{level:3,title:"插入",slug:"插入",children:[]}]},{level:2,title:"4. 查找算法",slug:"_4-查找算法",children:[]},{level:2,title:"5. 反转",slug:"_5-反转",children:[{level:3,title:"数组",slug:"数组",children:[]},{level:3,title:"字符串",slug:"字符串",children:[]},{level:3,title:"链表",slug:"链表",children:[]}]},{level:2,title:"6. 合并有序数组",slug:"_6-合并有序数组",children:[]},{level:2,title:"7. 哈希计数查找",slug:"_7-哈希计数查找",children:[]},{level:2,title:"8. 用有序字典实现 LRU缓存",slug:"_8-用有序字典实现-lru缓存",children:[]},{level:2,title:"Swift字符串算法特殊处理",slug:"swift字符串算法特殊处理",children:[]}],filePathRelative:"iOS/Algorithm.md",git:{updatedTime:1642749404e3,contributors:[]}}},40:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="算法" tabindex="-1"><a class="header-anchor" href="#算法" aria-hidden="true">#</a> 算法</h1><h2 id="_1-时间复杂度" tabindex="-1"><a class="header-anchor" href="#_1-时间复杂度" aria-hidden="true">#</a> 1. 时间复杂度</h2><ul><li><h3 id="时间频度" tabindex="-1"><a class="header-anchor" href="#时间频度" aria-hidden="true">#</a> 时间频度</h3><p>算法中语句执行次数称为时间频度，记为T(n)</p></li><li><h3 id="时间复杂度-o-n" tabindex="-1"><a class="header-anchor" href="#时间复杂度-o-n" aria-hidden="true">#</a> 时间复杂度 O(n)</h3></li></ul><h2 id="_2-空间复杂度" tabindex="-1"><a class="header-anchor" href="#_2-空间复杂度" aria-hidden="true">#</a> 2. 空间复杂度</h2><p>评估执行程序所需要的存储空间</p><h2 id="_3-排序算法" tabindex="-1"><a class="header-anchor" href="#_3-排序算法" aria-hidden="true">#</a> 3. 排序算法</h2><p>这里都按从小到大的 &lt; 顺序来排列</p><ul><li><h3 id="冒泡" tabindex="-1"><a class="header-anchor" href="#冒泡" aria-hidden="true">#</a> 冒泡</h3><p>一次比较两个相邻元素，大的换到后面；遍历重复，确保也只能确保最后一个元素是最大的，前面除最后一个元素外仍可能是乱序； 舍弃最后一个重复以上步骤，确保倒数第二个是第二大，以此类推就能确保右侧都是已排序序列</p></li></ul><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token number">_</span> array<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>array<span class="token punctuation">.</span><span class="token builtin">count</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">{</span>\n        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>array<span class="token punctuation">.</span><span class="token builtin">count</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n                <span class="token keyword">let</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>\n                array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span>\n                array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp\n                <span class="token comment">//array.swapAt(j, j+1)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ul><li><h3 id="选择" tabindex="-1"><a class="header-anchor" href="#选择" aria-hidden="true">#</a> 选择</h3><p>在右侧未排序序列中遍历找到最小元素，让其和未排序序列最前的元素交换，即追加到左侧已排序序列的末尾；重复以上步骤，每次在 剩下的未排序元素中找到最小的追加到已排序序列的末尾</p></li></ul><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function">selectionSort</span><span class="token punctuation">(</span><span class="token number">_</span> array<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>array<span class="token punctuation">.</span><span class="token builtin">count</span> <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> minIndex <span class="token operator">=</span> i\n        <span class="token keyword">for</span> j <span class="token keyword">in</span> i<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>array<span class="token punctuation">.</span><span class="token builtin">count</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token punctuation">{</span>\n                minIndex <span class="token operator">=</span> j\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">let</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n        array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span>\n        array<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">=</span> temp\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><ul><li><h3 id="插入" tabindex="-1"><a class="header-anchor" href="#插入" aria-hidden="true">#</a> 插入</h3><p>在右侧未排序序列中选择最前的元素，让其和左侧已排序序列中元素从后到前遍历依次比较，一次比较两个相邻元素，小的换到前面； 重复以上步骤，每次在未排序序列中选择最前的元素插入到已排序序列的应有位置使其仍然是已排序的序列</p></li></ul><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span><span class="token number">_</span> array<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>array<span class="token punctuation">.</span><span class="token builtin">count</span> <span class="token punctuation">{</span>\n        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">{</span>\n                <span class="token keyword">let</span> temp <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span>\n                array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>\n                array<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="_4-查找算法" tabindex="-1"><a class="header-anchor" href="#_4-查找算法" aria-hidden="true">#</a> 4. 查找算法</h2><h2 id="_5-反转" tabindex="-1"><a class="header-anchor" href="#_5-反转" aria-hidden="true">#</a> 5. 反转</h2><ul><li><h3 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h3><p>前后两个指针分别指向开始和结尾，交换，接着前指针后移，后指针前移；直到两指针相遇（偶数个元素）或者前指针在后指针的后面（奇数个元素）， 也就是要保证前指针在后指针的前面，才可以进行循环</p></li></ul><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token builtin">reverse</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">_</span> base<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> start <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token keyword">var</span> end <span class="token operator">=</span> base<span class="token punctuation">.</span><span class="token builtin">count</span> <span class="token operator">-</span> <span class="token number">1</span>\n    <span class="token keyword">while</span> start <span class="token operator">&lt;</span> end <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> temp <span class="token operator">=</span> base<span class="token punctuation">[</span>start<span class="token punctuation">]</span>\n        base<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> base<span class="token punctuation">[</span>end<span class="token punctuation">]</span>\n        base<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> temp\n        start <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>\n        end <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li><h3 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h3><p>原理相同，只不过在swift中String不能直接进行下标访问，需要写一个extension</p></li></ul><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token number">_</span> string<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token builtin">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> start <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token keyword">var</span> end <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token builtin">count</span> <span class="token operator">-</span> <span class="token number">1</span>\n    <span class="token keyword">while</span> start <span class="token operator">&lt;</span> end <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> temp <span class="token operator">=</span> string<span class="token punctuation">[</span>start<span class="token punctuation">]</span>\n        string<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> string<span class="token punctuation">[</span>end<span class="token punctuation">]</span>\n        string<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> temp\n        start <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>\n        end <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">extension</span> <span class="token builtin">String</span> <span class="token punctuation">{</span>\n    <span class="token keyword">func</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token number">_</span> i<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">Self</span><span class="token punctuation">.</span><span class="token builtin">Index</span> <span class="token punctuation">{</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>startIndex<span class="token punctuation">,</span> offsetBy<span class="token punctuation">:</span> i<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token keyword">subscript</span><span class="token punctuation">(</span><span class="token number">_</span> i<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">Character</span> <span class="token punctuation">{</span>\n        <span class="token keyword">get</span> <span class="token punctuation">{</span>\n            <span class="token keyword">self</span><span class="token punctuation">[</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">set</span> <span class="token punctuation">{</span>\n            <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> at<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><ul><li><h3 id="链表" tabindex="-1"><a class="header-anchor" href="#链表" aria-hidden="true">#</a> 链表</h3><p>设置一个新的头结点，遍历旧链表把每一个结点按顺序前插到新的链表中完成反转；使用可选项绑定来判空，首先临时保存当前结点的下一个结点， 将当前结点前插到新链表中时，next指向发生变化，所以必须先保存next；接着使current后移完成遍历，新头结点前移等待下一次前插；最终 新头结点为新链表的头结点</p></li></ul><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">class</span> <span class="token class-name">LinkNode</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> data<span class="token punctuation">:</span> T\n    <span class="token keyword">var</span> next<span class="token punctuation">:</span> <span class="token builtin">LinkNode</span><span class="token operator">?</span>\n    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token number">_</span> data<span class="token punctuation">:</span> T<span class="token punctuation">,</span> <span class="token number">_</span> next<span class="token punctuation">:</span> <span class="token builtin">LinkNode</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token constant">nil</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data\n        <span class="token keyword">self</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token builtin">reverse</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">_</span> head<span class="token punctuation">:</span> <span class="token builtin">LinkNode</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">LinkNode</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">?</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> current <span class="token operator">=</span> head\n    <span class="token keyword">var</span> newHead<span class="token punctuation">:</span> <span class="token builtin">LinkNode</span><span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token constant">nil</span>\n    <span class="token keyword">while</span> <span class="token keyword">let</span> cur <span class="token operator">=</span> current <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> temp <span class="token operator">=</span> cur<span class="token punctuation">.</span>next\n        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> newHead\n        current <span class="token operator">=</span> temp\n        newHead <span class="token operator">=</span> cur\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> newHead\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="_6-合并有序数组" tabindex="-1"><a class="header-anchor" href="#_6-合并有序数组" aria-hidden="true">#</a> 6. 合并有序数组</h2><p>使用两个指针分别指向两个数组，当两个指针都在数组范围内时，结果数组追加两个数组中更小的一个元素，追加了谁谁的指针就后移； 当两个指针中有一个溢出就不可再继续了，代码中数组访问会报错；分别使用两个循环追加剩下的元素，不用关心谁有剩余，谁有剩余谁追加，没有剩余循环就退出</p><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token number">_</span> array1<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">_</span> array2<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token keyword">var</span> q <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">while</span> p <span class="token operator">&lt;</span> array1<span class="token punctuation">.</span><span class="token builtin">count</span> <span class="token operator">&amp;&amp;</span> q <span class="token operator">&lt;</span> array2<span class="token punctuation">.</span><span class="token builtin">count</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> array1<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> array2<span class="token punctuation">[</span>q<span class="token punctuation">]</span> <span class="token punctuation">{</span>\n            result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>array1<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span>\n            p <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>array2<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">)</span>\n            q <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token keyword">while</span> p <span class="token operator">&lt;</span> array1<span class="token punctuation">.</span><span class="token builtin">count</span> <span class="token punctuation">{</span>\n        result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>array1<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span>\n        p <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">while</span> q <span class="token operator">&lt;</span> array2<span class="token punctuation">.</span><span class="token builtin">count</span> <span class="token punctuation">{</span>\n        result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>array2<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">)</span>\n        q <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="_7-哈希计数查找" tabindex="-1"><a class="header-anchor" href="#_7-哈希计数查找" aria-hidden="true">#</a> 7. 哈希计数查找</h2><p>查找第一个只出现一次的元素，哈希计数，遍历输入的序列，如果元素是第一次出现就把它的计数设为1，如果不是第一次出现就计数+1； 重新遍历，第一次找到哈希计数为一次的就反回结果；输入的序列可以是字符串或数组，序列中的元素要遵循哈希协议，这里的哈希实现 使用字典；字典返回的为可选项，当字典中没有关键字对应的值时返回nil，可选项绑定判空来判断是否是第一次出现</p><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">func</span> hashCount<span class="token operator">&lt;</span>T<span class="token punctuation">:</span> <span class="token builtin">Sequence</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">_</span> sequence<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> T<span class="token punctuation">.</span><span class="token builtin">Element</span><span class="token operator">?</span> <span class="token keyword">where</span> T<span class="token punctuation">.</span><span class="token builtin">Element</span><span class="token punctuation">:</span> <span class="token builtin">Hashable</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> dict <span class="token operator">=</span> <span class="token punctuation">[</span>T<span class="token punctuation">.</span><span class="token builtin">Element</span><span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">for</span> element <span class="token keyword">in</span> sequence <span class="token punctuation">{</span>\n        <span class="token keyword">guard</span> <span class="token keyword">let</span> value <span class="token operator">=</span> dict<span class="token punctuation">[</span>element<span class="token punctuation">]</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> dict<span class="token punctuation">[</span>element<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">continue</span> <span class="token punctuation">}</span>\n        dict<span class="token punctuation">[</span>element<span class="token punctuation">]</span> <span class="token operator">=</span> value <span class="token operator">+</span> <span class="token number">1</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">for</span> element <span class="token keyword">in</span> sequence <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> dict<span class="token punctuation">[</span>element<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> element\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token constant">nil</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="_8-用有序字典实现-lru缓存" tabindex="-1"><a class="header-anchor" href="#_8-用有序字典实现-lru缓存" aria-hidden="true">#</a> 8. 用有序字典实现 LRU缓存</h2><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token comment">// 双向链表结点</span>\n<span class="token keyword">class</span> <span class="token class-name">DoubleLinkedNode</span><span class="token operator">&lt;</span><span class="token builtin">Data</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> data<span class="token punctuation">:</span> <span class="token builtin">Data</span><span class="token operator">?</span>\n    <span class="token keyword">var</span> prev<span class="token punctuation">:</span> <span class="token builtin">DoubleLinkedNode</span><span class="token operator">?</span>\n    <span class="token keyword">var</span> next<span class="token punctuation">:</span> <span class="token builtin">DoubleLinkedNode</span><span class="token operator">?</span>\n\n    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token number">_</span> data<span class="token punctuation">:</span> <span class="token builtin">Data</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token constant">nil</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data\n        <span class="token keyword">self</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token constant">nil</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token constant">nil</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 双向链表</span>\n<span class="token comment">// tips: 双向链表的优点主要在于删除快，不需要遍历一遍找到待删除结点的前一个结点</span>\n<span class="token keyword">class</span> <span class="token class-name">DoubleLinkedList</span><span class="token operator">&lt;</span><span class="token builtin">Data</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 虚拟头尾结点</span>\n    <span class="token keyword">var</span> head<span class="token punctuation">:</span> <span class="token builtin">DoubleLinkedNode</span><span class="token operator">&lt;</span><span class="token builtin">Data</span><span class="token operator">&gt;</span>\n    <span class="token keyword">var</span> tail<span class="token punctuation">:</span> <span class="token builtin">DoubleLinkedNode</span><span class="token operator">&lt;</span><span class="token builtin">Data</span><span class="token operator">&gt;</span>\n\n    <span class="token comment">// 链表结点个数</span>\n    <span class="token keyword">var</span> <span class="token builtin">count</span><span class="token punctuation">:</span> <span class="token builtin">Int</span>\n\n    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token function">DoubleLinkedNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> <span class="token function">DoubleLinkedNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n        <span class="token keyword">self</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>tail\n        <span class="token keyword">self</span><span class="token punctuation">.</span>tail<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>head\n\n        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token builtin">count</span> <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 在虚拟头结点之后插入新结点，即在链表的第一个位置插入结点</span>\n    <span class="token keyword">func</span> <span class="token function">insertFirst</span><span class="token punctuation">(</span><span class="token number">_</span> newNode<span class="token punctuation">:</span> <span class="token builtin">DoubleLinkedNode</span><span class="token operator">&lt;</span><span class="token builtin">Data</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>newNode<span class="token punctuation">,</span> after<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">.</span>head<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 删除虚拟尾结点的前一个结点，即删除链表最后一个位置的结点，并返回结点的引用</span>\n    <span class="token keyword">func</span> <span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">DoubleLinkedNode</span><span class="token operator">&lt;</span><span class="token builtin">Data</span><span class="token operator">&gt;</span><span class="token operator">?</span> <span class="token punctuation">{</span>\n        <span class="token keyword">guard</span> <span class="token keyword">let</span> <span class="token builtin">last</span> <span class="token operator">=</span> tail<span class="token punctuation">.</span>prev <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token constant">nil</span> <span class="token punctuation">}</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token builtin">last</span><span class="token punctuation">)</span>\n        <span class="token keyword">return</span> <span class="token builtin">last</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 把某个结点移动到链表的第一个位置</span>\n    <span class="token keyword">func</span> <span class="token function">moveToFirst</span><span class="token punctuation">(</span><span class="token number">_</span> node<span class="token punctuation">:</span> <span class="token builtin">DoubleLinkedNode</span><span class="token operator">&lt;</span><span class="token builtin">Data</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 先删掉它，再在第一个位置插入</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">insertFirst</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 在某个结点之后插入新的结点</span>\n    <span class="token keyword">func</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">_</span> newNode<span class="token punctuation">:</span> <span class="token builtin">DoubleLinkedNode</span><span class="token operator">&lt;</span><span class="token builtin">Data</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> after prevNode<span class="token punctuation">:</span> <span class="token builtin">DoubleLinkedNode</span><span class="token operator">&lt;</span><span class="token builtin">Data</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">guard</span> <span class="token keyword">let</span> nextNode <span class="token operator">=</span> prevNode<span class="token punctuation">.</span>next <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span>\n\n        <span class="token comment">// 新结点的前指针指向新结点前面的结点，新结点后面的结点的前指针指向新结点</span>\n        newNode<span class="token punctuation">.</span>prev <span class="token operator">=</span> prevNode\n        nextNode<span class="token punctuation">.</span>prev <span class="token operator">=</span> newNode\n\n        <span class="token comment">// 新结点的后指针指向新结点后面的结点，新结点前面的结点的后指针指向新结点</span>\n        newNode<span class="token punctuation">.</span>next <span class="token operator">=</span> nextNode\n        prevNode<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode\n\n        <span class="token comment">// 插入计数 + 1</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token builtin">count</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 删除结点</span>\n    <span class="token keyword">func</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">_</span> node<span class="token punctuation">:</span> <span class="token builtin">DoubleLinkedNode</span><span class="token operator">&lt;</span><span class="token builtin">Data</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">guard</span> <span class="token keyword">let</span> prevNode <span class="token operator">=</span> node<span class="token punctuation">.</span>prev<span class="token punctuation">,</span> <span class="token keyword">let</span> nextNode <span class="token operator">=</span> node<span class="token punctuation">.</span>next <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span>\n\n        <span class="token comment">// 待删除结点的后一个结点的前指针指向待删除结点的前一个结点，待删除结点的前一个结点的后指针指向待删除结点的后一个结点</span>\n        nextNode<span class="token punctuation">.</span>prev <span class="token operator">=</span> node<span class="token punctuation">.</span>prev\n        prevNode<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next\n\n        <span class="token comment">// 删除计数 - 1</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token builtin">count</span> <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 键值对</span>\n<span class="token keyword">struct</span> <span class="token builtin">KeyValue</span><span class="token operator">&lt;</span><span class="token builtin">Key</span><span class="token punctuation">,</span> <span class="token builtin">Value</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> key<span class="token punctuation">:</span> <span class="token builtin">Key</span>\n    <span class="token keyword">var</span> value<span class="token punctuation">:</span> <span class="token builtin">Value</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 双向链表 + 哈希表</span>\n<span class="token comment">// 用哈希字典存储链表的结点引用，可以根据 key 键找到哈希字典中的链表结点引用进而找到链表中存储的 value 值</span>\n<span class="token comment">// 本来哈希字典是没有顺序的，与链表结合可以创造有序字典</span>\n<span class="token keyword">class</span> <span class="token class-name">LinkedHashList</span><span class="token operator">&lt;</span><span class="token builtin">Key</span><span class="token punctuation">:</span> <span class="token builtin">Hashable</span><span class="token punctuation">,</span> <span class="token builtin">Value</span><span class="token operator">&gt;</span><span class="token punctuation">:</span> <span class="token builtin">DoubleLinkedList</span><span class="token operator">&lt;</span><span class="token builtin">KeyValue</span><span class="token operator">&lt;</span><span class="token builtin">Key</span><span class="token punctuation">,</span> <span class="token builtin">Value</span><span class="token operator">&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 哈希字典 [键: 结点引用]</span>\n    <span class="token keyword">var</span> dict<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token builtin">Key</span><span class="token punctuation">:</span> <span class="token builtin">DoubleLinkedNode</span><span class="token operator">&lt;</span><span class="token builtin">KeyValue</span><span class="token operator">&lt;</span><span class="token builtin">Key</span><span class="token punctuation">,</span> <span class="token builtin">Value</span><span class="token operator">&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">]</span>\n\n    <span class="token keyword">override</span> <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span>dict <span class="token operator">=</span> <span class="token function">Dictionary</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">subscript</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token builtin">Key</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">Value</span><span class="token operator">?</span> <span class="token punctuation">{</span>\n        <span class="token comment">// key -&gt; node -&gt; value</span>\n        <span class="token keyword">get</span> <span class="token punctuation">{</span>\n            <span class="token keyword">guard</span> <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token constant">nil</span> <span class="token punctuation">}</span>\n            <span class="token keyword">guard</span> <span class="token keyword">let</span> data <span class="token operator">=</span> node<span class="token punctuation">.</span>data <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token constant">nil</span> <span class="token punctuation">}</span>\n            <span class="token keyword">return</span> data<span class="token punctuation">.</span>value\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">set</span> <span class="token punctuation">{</span>\n            <span class="token comment">// newValue 不为 nil 时</span>\n            <span class="token keyword">if</span> <span class="token keyword">let</span> newValue <span class="token operator">=</span> newValue <span class="token punctuation">{</span>\n                <span class="token comment">// 已经有键时，修改链表结点的值</span>\n                <span class="token keyword">if</span> <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token punctuation">{</span>\n                    node<span class="token punctuation">.</span>data<span class="token operator">?</span><span class="token punctuation">.</span>value <span class="token operator">=</span> newValue\n                <span class="token punctuation">}</span>\n                <span class="token comment">// 没有键时，新建结点，设置哈希字典键对应的结点索引，并把结点插入到链表的第一个位置</span>\n                <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">let</span> newNode <span class="token operator">=</span> <span class="token builtin">DoubleLinkedNode</span><span class="token operator">&lt;</span><span class="token builtin">KeyValue</span><span class="token operator">&lt;</span><span class="token builtin">Key</span><span class="token punctuation">,</span> <span class="token builtin">Value</span><span class="token operator">&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token function">KeyValue</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">,</span> value<span class="token punctuation">:</span> newValue<span class="token punctuation">)</span><span class="token punctuation">)</span>\n                    <span class="token keyword">self</span><span class="token punctuation">.</span>dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newNode\n                    <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">insertFirst</span><span class="token punctuation">(</span>newNode<span class="token punctuation">)</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n            <span class="token comment">// newValue 为 nil 时，删除哈希字典索引，并删除链表中的结点 </span>\n            <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                <span class="token keyword">guard</span> <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span>\n                <span class="token keyword">self</span><span class="token punctuation">.</span>dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">nil</span>\n                <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n \n    <span class="token comment">// 根据关键字，把某个结点移动到链表的第一个位置</span>\n    <span class="token keyword">func</span> <span class="token function">moveToFirst</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token builtin">Key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">guard</span> <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>dict<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">moveToFirst</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 删除链表最后一个位置的结点，并把删除哈希字典索引</span>\n    <span class="token keyword">func</span> <span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n        <span class="token keyword">guard</span> <span class="token keyword">let</span> removedNode <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span>\n        <span class="token keyword">guard</span> <span class="token keyword">let</span> data <span class="token operator">=</span> removedNode<span class="token punctuation">.</span>data <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span>dict<span class="token punctuation">[</span>data<span class="token punctuation">.</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">nil</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Least Recently Used，最少使用缓存算法</span>\n<span class="token comment">// 设置缓存最大容量，当缓存到达最大容量时，删除最少使用的缓存</span>\n<span class="token keyword">class</span> <span class="token class-name">LRUCache</span><span class="token operator">&lt;</span><span class="token builtin">Key</span><span class="token punctuation">:</span> <span class="token builtin">Hashable</span><span class="token punctuation">,</span> <span class="token builtin">Value</span><span class="token operator">&gt;</span><span class="token punctuation">:</span> <span class="token builtin">LinkedHashList</span><span class="token operator">&lt;</span><span class="token builtin">Key</span><span class="token punctuation">,</span> <span class="token builtin">Value</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 容量</span>\n    <span class="token keyword">var</span> capacity<span class="token punctuation">:</span> <span class="token builtin">Int</span>\n\n    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token number">_</span> capacity<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 获取缓存</span>\n    <span class="token keyword">func</span> <span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token builtin">Key</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">Value</span><span class="token operator">?</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 使用过移动到最前</span>\n        <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">moveToFirst</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span>\n        <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 设置缓存</span>\n    <span class="token keyword">func</span> <span class="token keyword">set</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token builtin">Key</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token builtin">Value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 使用过移动到最前，如果新建结点，默认插入到最前所以不需要移动到最前</span>\n        <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token number">_</span> <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token punctuation">{</span>\n            <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">moveToFirst</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> key<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">self</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value\n\n        <span class="token comment">// 超出最大容量时，删除最后面的使用最少的缓存</span>\n        <span class="token keyword">if</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token builtin">count</span> <span class="token operator">&gt;</span> <span class="token keyword">self</span><span class="token punctuation">.</span>capacity <span class="token punctuation">{</span>\n            <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br><span class="line-number">167</span><br><span class="line-number">168</span><br><span class="line-number">169</span><br><span class="line-number">170</span><br><span class="line-number">171</span><br><span class="line-number">172</span><br><span class="line-number">173</span><br><span class="line-number">174</span><br><span class="line-number">175</span><br></div></div><h2 id="swift字符串算法特殊处理" tabindex="-1"><a class="header-anchor" href="#swift字符串算法特殊处理" aria-hidden="true">#</a> Swift字符串算法特殊处理</h2><p>避免String为兼容utf-8而产生的繁琐下标方法，以及因此带来的性能损失</p><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">var</span> stringArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">Character</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span>\n<span class="token function">print</span><span class="token punctuation">(</span>stringArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// a</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',32),t={render:function(n,s){return p}}}}]);
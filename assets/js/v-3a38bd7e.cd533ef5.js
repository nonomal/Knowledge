(self.webpackChunkknowledge=self.webpackChunkknowledge||[]).push([[5821],{5998:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-3a38bd7e",path:"/iOS/Swift.html",title:"Swift",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1. copy",slug:"_1-copy",children:[]},{level:2,title:"2. mutating",slug:"_2-mutating",children:[]},{level:2,title:"3. 柯里化",slug:"_3-柯里化",children:[]},{level:2,title:"4. 常用高阶函数",slug:"_4-常用高阶函数",children:[]},{level:2,title:"5. defer",slug:"_5-defer",children:[]},{level:2,title:"6. associatedtype",slug:"_6-associatedtype",children:[]},{level:2,title:"7. final",slug:"_7-final",children:[]},{level:2,title:"8. 访问控制",slug:"_8-访问控制",children:[]},{level:2,title:"9. try! try?",slug:"_9-try-try",children:[]},{level:2,title:"10. @autoclosure",slug:"_10-autoclosure",children:[]},{level:2,title:"11. @escaping",slug:"_11-escaping",children:[]},{level:2,title:"12. @discardableResult",slug:"_12-discardableresult",children:[]},{level:2,title:"13. 枚举关联值",slug:"_13-枚举关联值",children:[]},{level:2,title:"14. 枚举封装",slug:"_14-枚举封装",children:[]},{level:2,title:"15. 操作列表",slug:"_15-操作列表",children:[]},{level:2,title:"16. ??",slug:"_16",children:[]},{level:2,title:"17. @propertyWrapper",slug:"_17-propertywrapper",children:[]},{level:2,title:"18. keyPath",slug:"_18-keypath",children:[]},{level:2,title:"19. 元素为值类型和引用类型的数组更改的区别",slug:"_19-元素为值类型和引用类型的数组更改的区别",children:[]},{level:2,title:"20. 字典key和value同时映射",slug:"_20-字典key和value同时映射",children:[]},{level:2,title:"21. @_dynamicReplacement",slug:"_21-dynamicreplacement",children:[]}],filePathRelative:"iOS/Swift.md",git:{updatedTime:1642749404e3,contributors:[]}}},3717:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="swift" tabindex="-1"><a class="header-anchor" href="#swift" aria-hidden="true">#</a> Swift</h1><h2 id="_1-copy" tabindex="-1"><a class="header-anchor" href="#_1-copy" aria-hidden="true">#</a> 1. copy</h2><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span> <span class="token builtin">NSCopying</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>\n    <span class="token keyword">func</span> <span class="token function">copy</span><span class="token punctuation">(</span>with zone<span class="token punctuation">:</span> <span class="token builtin">NSZone</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token constant">nil</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">Any</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> cp <span class="token operator">=</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        cp<span class="token punctuation">.</span>a <span class="token operator">=</span> a\n        <span class="token keyword">return</span> cp\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">let</span> cp <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span><span class="token operator">!</span> A\n\na<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span>\n<span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>a<span class="token punctuation">,</span> cp<span class="token punctuation">.</span>a<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="_2-mutating" tabindex="-1"><a class="header-anchor" href="#_2-mutating" aria-hidden="true">#</a> 2. mutating</h2><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">struct</span> A <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>\n    \n    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function">changeA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        a <span class="token operator">=</span> <span class="token number">2</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\na<span class="token punctuation">.</span><span class="token function">changeA</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>a<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="_3-柯里化" tabindex="-1"><a class="header-anchor" href="#_3-柯里化" aria-hidden="true">#</a> 3. 柯里化</h2><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function">addTo</span><span class="token punctuation">(</span><span class="token number">_</span> x<span class="token punctuation">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span> y <span class="token keyword">in</span>\n        <span class="token keyword">return</span> x <span class="token operator">+</span> y\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> addTo3 <span class="token operator">=</span> <span class="token function">addTo</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\n<span class="token function">addTo3</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>\n<span class="token function">addTo3</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="_4-常用高阶函数" tabindex="-1"><a class="header-anchor" href="#_4-常用高阶函数" aria-hidden="true">#</a> 4. 常用高阶函数</h2><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token comment">//map映射</span>\n<span class="token keyword">let</span> mapResult <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">String</span> <span class="token keyword">in</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;<span class="token interpolation"><span class="token delimiter variable">\\(</span>i<span class="token delimiter variable">)</span></span>&quot;</span>\n<span class="token punctuation">}</span>\n<span class="token function">print</span><span class="token punctuation">(</span>mapResult<span class="token punctuation">)</span><span class="token comment">//[&quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;]</span>\n\n\n<span class="token comment">//compactMap丢弃nil映射</span>\n<span class="token keyword">let</span> compactMapResult <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;@&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;#&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>compactMap <span class="token punctuation">{</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">Int</span><span class="token operator">?</span> <span class="token keyword">in</span>\n    <span class="token keyword">return</span> <span class="token function">Int</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">print</span><span class="token punctuation">(</span>compactMapResult<span class="token punctuation">)</span><span class="token comment">//[0, 1, 2, 3]</span>\n\n\n<span class="token comment">//filter过滤器</span>\n<span class="token keyword">let</span> filterResult <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">filter</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">Bool</span> <span class="token keyword">in</span>\n    <span class="token keyword">return</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span>\n<span class="token punctuation">}</span>\n<span class="token function">print</span><span class="token punctuation">(</span>filterResult<span class="token punctuation">)</span><span class="token comment">//[0, 2]</span>\n\n\n<span class="token comment">//reduce合并</span>\n<span class="token keyword">let</span> reduceResult <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>re<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">Int</span> <span class="token keyword">in</span>\n    <span class="token keyword">return</span> re <span class="token operator">+</span> i\n<span class="token punctuation">}</span>\n<span class="token function">print</span><span class="token punctuation">(</span>reduceResult<span class="token punctuation">)</span><span class="token comment">//6</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h2 id="_5-defer" tabindex="-1"><a class="header-anchor" href="#_5-defer" aria-hidden="true">#</a> 5. defer</h2><p>延时执行，会在其所在作用域内所有语句执行完毕再执行 可以使得数据库连接、文件连接等关闭语句不一定非要写到作用域尾部，可以使用defer关键字和建立连接写到一起</p><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">defer</span> <span class="token punctuation">{</span>\n        <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//   1\\n 2\\n</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="_6-associatedtype" tabindex="-1"><a class="header-anchor" href="#_6-associatedtype" aria-hidden="true">#</a> 6. associatedtype</h2><p>协议的泛型</p><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">protocol</span> P <span class="token punctuation">{</span>\n    associatedtype A\n    <span class="token keyword">var</span> p<span class="token punctuation">:</span> A <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token keyword">set</span> <span class="token punctuation">}</span>\n    <span class="token keyword">func</span> <span class="token function">changeP</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> A\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">C1</span><span class="token punctuation">:</span> P <span class="token punctuation">{</span>\n    <span class="token keyword">typealias</span> A <span class="token operator">=</span> <span class="token builtin">Int</span>\n    \n    <span class="token keyword">var</span> p<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> <span class="token number">1</span>\n    \n    <span class="token keyword">func</span> <span class="token function">changeP</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>\n        p <span class="token operator">=</span> <span class="token number">2</span>\n        <span class="token keyword">return</span> p\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">C2</span><span class="token punctuation">:</span> P <span class="token punctuation">{</span>\n    <span class="token keyword">typealias</span> A <span class="token operator">=</span> <span class="token builtin">String</span>\n    \n    <span class="token keyword">var</span> p<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span>\n    \n    <span class="token keyword">func</span> <span class="token function">changeP</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">String</span> <span class="token punctuation">{</span>\n        p <span class="token operator">=</span> <span class="token string">&quot;b&quot;</span>\n        <span class="token keyword">return</span> p\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> c1 <span class="token operator">=</span> <span class="token function">C1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nc1<span class="token punctuation">.</span><span class="token function">changeP</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">let</span> c2 <span class="token operator">=</span> <span class="token function">C2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nc2<span class="token punctuation">.</span><span class="token function">changeP</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h2 id="_7-final" tabindex="-1"><a class="header-anchor" href="#_7-final" aria-hidden="true">#</a> 7. final</h2><p>限制继承和重写</p><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token comment">//final限制继承</span>\n<span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">FinalClass</span> <span class="token punctuation">{</span>\n\n<span class="token punctuation">}</span>\n<span class="token comment">//class SubClass: FinalClass {}  //编译错误，无法继承final class</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_8-访问控制" tabindex="-1"><a class="header-anchor" href="#_8-访问控制" aria-hidden="true">#</a> 8. 访问控制</h2><ul><li>open</li><li>public</li><li>internal</li><li>file-private</li><li>private</li></ul><ol><li>open 在其它模块中可以访问和重写</li><li>public 在其它模块中可以访问，但不可以重写</li><li>internal 默认，在模块内部的多个文件内可以访问和重写</li><li>file-private 在文件内部可以访问</li><li>private 在类或结构体的内部可以访问</li></ol><h2 id="_9-try-try" tabindex="-1"><a class="header-anchor" href="#_9-try-try" aria-hidden="true">#</a> 9. try! try?</h2><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token comment">//try!  try?</span>\n<span class="token keyword">func</span> <span class="token function">devide</span><span class="token punctuation">(</span><span class="token number">_</span> a<span class="token punctuation">:</span> <span class="token builtin">Double</span><span class="token punctuation">,</span> <span class="token number">_</span> b<span class="token punctuation">:</span> <span class="token builtin">Double</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">Double</span> <span class="token punctuation">{</span>\n    <span class="token keyword">enum</span> <span class="token builtin">DevideError</span><span class="token punctuation">:</span> <span class="token builtin">Error</span> <span class="token punctuation">{</span>\n        <span class="token keyword">case</span> <span class="token builtin">ZeroError</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">guard</span> b <span class="token operator">!=</span> <span class="token function">Double</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> <span class="token builtin">DevideError</span><span class="token punctuation">.</span><span class="token builtin">ZeroError</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> a <span class="token operator">/</span> b\n<span class="token punctuation">}</span>\n<span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">try</span><span class="token operator">?</span> <span class="token function">devide</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//Optional(2.0)</span>\n<span class="token comment">//print(try! devide(2, 0))   //Fatal error崩溃退出</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="_10-autoclosure" tabindex="-1"><a class="header-anchor" href="#_10-autoclosure" aria-hidden="true">#</a> 10. @autoclosure</h2><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token comment">//autoclosure把传进来的参数自动加上个闭包</span>\n<span class="token keyword">func</span> <span class="token function">logIfTrue</span><span class="token punctuation">(</span><span class="token number">_</span> predict<span class="token punctuation">:</span> @autoclosure <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">Bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token function">predict</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;True&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token function">logIfTrue</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="_11-escaping" tabindex="-1"><a class="header-anchor" href="#_11-escaping" aria-hidden="true">#</a> 11. @escaping</h2><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">import</span> <span class="token builtin">Foundation</span>\n\n<span class="token comment">//  逃逸闭包，在闭包所在的函数体执行完毕之后执行的闭包</span>\n<span class="token keyword">func</span> <span class="token function">delay</span><span class="token punctuation">(</span>callback<span class="token punctuation">:</span> @escaping <span class="token punctuation">(</span><span class="token builtin">Timer</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">Void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">Timer</span><span class="token punctuation">(</span>timeInterval<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> repeats<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> block<span class="token punctuation">:</span> callback<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fire</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\ndelay <span class="token punctuation">{</span> <span class="token number">_</span> <span class="token keyword">in</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;escaping after 1 second&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="_12-discardableresult" tabindex="-1"><a class="header-anchor" href="#_12-discardableresult" aria-hidden="true">#</a> 12. @discardableResult</h2><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token comment">//在函数前加上@discardableResult，即使返回值没有被使用，编译器也不会提示</span>\n@discardableResult\n<span class="token keyword">func</span> <span class="token function">discardResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token number">1</span>\n<span class="token punctuation">}</span>\n<span class="token function">discardResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="_13-枚举关联值" tabindex="-1"><a class="header-anchor" href="#_13-枚举关联值" aria-hidden="true">#</a> 13. 枚举关联值</h2><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">enum</span> <span class="token builtin">Person</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token function">man</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token builtin">String</span><span class="token punctuation">)</span>\n    <span class="token keyword">case</span> <span class="token function">woman</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">whatName</span><span class="token punctuation">(</span><span class="token number">_</span> person<span class="token punctuation">:</span> <span class="token builtin">Person</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">switch</span> person <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token keyword">let</span> <span class="token punctuation">.</span><span class="token function">man</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;man&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>\n    <span class="token keyword">case</span> <span class="token keyword">let</span> <span class="token punctuation">.</span><span class="token function">woman</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;woman&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">whatName</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">man</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// man 1</span>\n<span class="token function">whatName</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">woman</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// woman 2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="_14-枚举封装" tabindex="-1"><a class="header-anchor" href="#_14-枚举封装" aria-hidden="true">#</a> 14. 枚举封装</h2><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">enum</span> <span class="token builtin">Week</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> <span class="token builtin">Monday</span>\n    <span class="token keyword">case</span> <span class="token builtin">Tuesday</span>\n    <span class="token keyword">case</span> <span class="token function">Whitch</span><span class="token punctuation">(</span><span class="token builtin">Int</span><span class="token punctuation">)</span>\n    <span class="token keyword">func</span> <span class="token function">printDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">switch</span> <span class="token keyword">self</span> <span class="token punctuation">{</span>\n        <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token builtin">Monday</span><span class="token punctuation">:</span>\n            <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n        <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token builtin">Tuesday</span><span class="token punctuation">:</span>\n            <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n        <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">Whitch</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>\n            <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token builtin">Week</span><span class="token punctuation">.</span><span class="token builtin">Monday</span><span class="token punctuation">.</span><span class="token function">printDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token builtin">Week</span><span class="token punctuation">.</span><span class="token builtin">Tuesday</span><span class="token punctuation">.</span><span class="token function">printDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token builtin">Week</span><span class="token punctuation">.</span><span class="token function">Whitch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">printDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="_15-操作列表" tabindex="-1"><a class="header-anchor" href="#_15-操作列表" aria-hidden="true">#</a> 15. 操作列表</h2><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token comment">//[.option1, .option2]</span>\n<span class="token keyword">enum</span> <span class="token builtin">Option</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> option1\n    <span class="token keyword">case</span> option2\n<span class="token punctuation">}</span>\n<span class="token keyword">typealias</span> <span class="token builtin">Options</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">Option</span><span class="token punctuation">]</span>\n<span class="token keyword">func</span> <span class="token function">setOptions</span><span class="token punctuation">(</span><span class="token number">_</span> options<span class="token punctuation">:</span> <span class="token builtin">Options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">struct</span> <span class="token builtin">ParsedOptions</span> <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> option1 <span class="token operator">=</span> <span class="token boolean">false</span>\n        <span class="token keyword">var</span> option2 <span class="token operator">=</span> <span class="token boolean">false</span>\n        <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token number">_</span> options<span class="token punctuation">:</span> <span class="token builtin">Options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">for</span> op <span class="token keyword">in</span> options <span class="token punctuation">{</span>\n                <span class="token keyword">switch</span> op <span class="token punctuation">{</span>\n                <span class="token keyword">case</span> <span class="token punctuation">.</span>option1<span class="token punctuation">:</span>\n                    option1 <span class="token operator">=</span> <span class="token boolean">true</span>\n                <span class="token keyword">case</span> <span class="token punctuation">.</span>option2<span class="token punctuation">:</span>\n                    option2 <span class="token operator">=</span> <span class="token boolean">true</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">ParsedOptions</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">setOptions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">.</span>option1<span class="token punctuation">,</span> <span class="token punctuation">.</span>option2<span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="_16" tabindex="-1"><a class="header-anchor" href="#_16" aria-hidden="true">#</a> 16. ??</h2><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token comment">//?? Optional默认值</span>\n<span class="token keyword">let</span> defaultNilValue <span class="token operator">=</span> <span class="token function">Int</span><span class="token punctuation">(</span><span class="token string">&quot;@&quot;</span><span class="token punctuation">)</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token number">0</span>\n<span class="token function">print</span><span class="token punctuation">(</span>defaultNilValue<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_17-propertywrapper" tabindex="-1"><a class="header-anchor" href="#_17-propertywrapper" aria-hidden="true">#</a> 17. @propertyWrapper</h2><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token comment">//  用属性包装器来包裹</span>\n@propertyWrapper\n<span class="token keyword">struct</span> <span class="token builtin">AddOne</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">var</span> x<span class="token punctuation">:</span> <span class="token builtin">Int</span>\n    \n    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        x <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token keyword">var</span> wrappedValue<span class="token punctuation">:</span> <span class="token builtin">Int</span> <span class="token punctuation">{</span>\n        <span class="token keyword">get</span> <span class="token punctuation">{</span>\n            x <span class="token operator">+</span> <span class="token number">1</span>\n        <span class="token punctuation">}</span>\n        \n        <span class="token keyword">set</span> <span class="token punctuation">{</span>\n            x <span class="token operator">=</span> newValue\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//  属性包装器不能写在模块顶层</span>\n<span class="token keyword">struct</span> <span class="token builtin">Test</span> <span class="token punctuation">{</span>\n    @<span class="token builtin">AddOne</span> <span class="token keyword">var</span> addOne<span class="token punctuation">:</span> <span class="token builtin">Int</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token function">print</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>addOne<span class="token punctuation">)</span> <span class="token comment">// 1</span>\ntest<span class="token punctuation">.</span>addOne <span class="token operator">=</span> <span class="token number">1</span>\n<span class="token function">print</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>addOne<span class="token punctuation">)</span> <span class="token comment">// 2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h2 id="_18-keypath" tabindex="-1"><a class="header-anchor" href="#_18-keypath" aria-hidden="true">#</a> 18. keyPath</h2><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">struct</span> A <span class="token punctuation">{</span>\n    <span class="token keyword">struct</span> B <span class="token punctuation">{</span>\n        <span class="token keyword">struct</span> C <span class="token punctuation">{</span>\n            <span class="token keyword">let</span> value<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">&quot;c&quot;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">let</span> value<span class="token punctuation">:</span> C <span class="token operator">=</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">let</span> value<span class="token punctuation">:</span> B <span class="token operator">=</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">var</span> c<span class="token punctuation">:</span> <span class="token builtin">String</span> <span class="token punctuation">{</span>\n        <span class="token keyword">get</span> <span class="token punctuation">{</span>\n            <span class="token keyword">self</span><span class="token punctuation">[</span>keyPath<span class="token punctuation">:</span> \\<span class="token punctuation">.</span>value<span class="token punctuation">.</span>value<span class="token punctuation">.</span>value<span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">func</span> <span class="token function">keyPath</span><span class="token punctuation">(</span><span class="token number">_</span> keyPath<span class="token punctuation">:</span> <span class="token builtin">KeyPath</span><span class="token operator">&lt;</span>A<span class="token punctuation">,</span> <span class="token builtin">String</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">String</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">[</span>keyPath<span class="token punctuation">:</span> keyPath<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\na<span class="token punctuation">.</span>value<span class="token punctuation">.</span>value<span class="token punctuation">.</span>value\n<span class="token keyword">let</span> keyPath <span class="token operator">=</span> \\A<span class="token punctuation">.</span>value<span class="token punctuation">.</span>value<span class="token punctuation">.</span>value\na<span class="token punctuation">[</span>keyPath<span class="token punctuation">:</span> keyPath<span class="token punctuation">]</span>\na<span class="token punctuation">.</span><span class="token function">keyPath</span><span class="token punctuation">(</span>\\<span class="token punctuation">.</span>value<span class="token punctuation">.</span>value<span class="token punctuation">.</span>value<span class="token punctuation">)</span>\na<span class="token punctuation">.</span>c\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="_19-元素为值类型和引用类型的数组更改的区别" tabindex="-1"><a class="header-anchor" href="#_19-元素为值类型和引用类型的数组更改的区别" aria-hidden="true">#</a> 19. 元素为值类型和引用类型的数组更改的区别</h2><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token comment">// 元素为值类型的数组只可以使用index更改数组</span>\n\n<span class="token keyword">struct</span> <span class="token builtin">Value</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> property <span class="token operator">=</span> <span class="token number">0</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> valueArray<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token builtin">Value</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>repeating<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">count</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span>\n\n<span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>valueArray<span class="token punctuation">.</span><span class="token builtin">count</span> <span class="token punctuation">{</span>\n    valueArray<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>property <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">dump</span><span class="token punctuation">(</span>valueArray<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token comment">// 元素为引用类型的数组既可以使用index更改数组，又可以使用for-in循环更改数组</span>\n<span class="token keyword">class</span> <span class="token class-name">Reference</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> property <span class="token operator">=</span> <span class="token number">0</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 引用类型元素不可以使用Array(repeating:count:)来循环创建数组，否则创建出来的数组都是同一个引用</span>\n<span class="token comment">//var referenceArray: [Reference] = .init(repeating: .init(), count: 3)</span>\n<span class="token keyword">var</span> referenceArray<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token builtin">Reference</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span><span class="token function">AnyIterator</span><span class="token punctuation">(</span><span class="token builtin">Reference</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">prefix</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token keyword">for</span> reference <span class="token keyword">in</span> referenceArray <span class="token punctuation">{</span>\n    reference<span class="token punctuation">.</span>property <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>referenceArray<span class="token punctuation">.</span><span class="token builtin">count</span> <span class="token punctuation">{</span>\n    referenceArray<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>property <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">dump</span><span class="token punctuation">(</span>referenceArray<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="_20-字典key和value同时映射" tabindex="-1"><a class="header-anchor" href="#_20-字典key和value同时映射" aria-hidden="true">#</a> 20. 字典key和value同时映射</h2><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">extension</span> <span class="token builtin">Dictionary</span> <span class="token punctuation">{</span>\n    <span class="token keyword">func</span> mapKeysAndValues<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">_</span> transform<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span> <span class="token builtin">Key</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token builtin">Value</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span>K<span class="token punctuation">,</span> V<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">rethrows</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>K<span class="token punctuation">:</span> V<span class="token punctuation">]</span> <span class="token punctuation">{</span>\n        <span class="token punctuation">[</span>K<span class="token punctuation">:</span> V<span class="token punctuation">]</span><span class="token punctuation">(</span>uniqueKeysWithValues<span class="token punctuation">:</span> <span class="token keyword">try</span> <span class="token function">map</span><span class="token punctuation">(</span>transform<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_21-dynamicreplacement" tabindex="-1"><a class="header-anchor" href="#_21-dynamicreplacement" aria-hidden="true">#</a> 21. @_dynamicReplacement</h2><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>\n    <span class="token keyword">dynamic</span> <span class="token keyword">func</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">extension</span> B <span class="token punctuation">{</span>\n    @<span class="token function">_dynamicReplacement</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span>a<span class="token punctuation">)</span>\n    <span class="token keyword">func</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>',48),t={render:function(n,s){return p}}}}]);
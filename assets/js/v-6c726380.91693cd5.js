(self.webpackChunkknowledge=self.webpackChunkknowledge||[]).push([[690],{2944:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-6c726380",path:"/iOS/Multi-thread.html",title:"多线程",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1. 进程与线程",slug:"_1-进程与线程",children:[]},{level:2,title:"2. 什么是多线程",slug:"_2-什么是多线程",children:[]},{level:2,title:"3. 多线程的优点和缺点",slug:"_3-多线程的优点和缺点",children:[]},{level:2,title:"4. 并行 和 并发",slug:"_4-并行-和-并发",children:[]},{level:2,title:"5. 多线程方案",slug:"_5-多线程方案",children:[]},{level:2,title:"6. Thread",slug:"_6-thread",children:[]},{level:2,title:"7. GCD",slug:"_7-gcd",children:[]},{level:2,title:"8. OperationQueue",slug:"_8-operationqueue",children:[]}],filePathRelative:"iOS/Multi-thread.md",git:{updatedTime:1627538462e3,contributors:[]}}},9306:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="多线程" tabindex="-1"><a class="header-anchor" href="#多线程" aria-hidden="true">#</a> 多线程</h1><h2 id="_1-进程与线程" tabindex="-1"><a class="header-anchor" href="#_1-进程与线程" aria-hidden="true">#</a> 1. 进程与线程</h2><ul><li>进程</li></ul><p>进程是指正在运行的一个应用程序，正在进行的程序；进程之间是独立的，拥有独立运行所需要的全部资源</p><ul><li>线程</li></ul><p>一个进程中可以有多个线程，至少有一个默认启动的线程即为主线程；同一个进程内的线程共享进程资源</p><h2 id="_2-什么是多线程" tabindex="-1"><a class="header-anchor" href="#_2-什么是多线程" aria-hidden="true">#</a> 2. 什么是多线程</h2><ul><li>同一时间内单核CPU只能执行一个线程，多线程是CPU快速在多个线程之间进行切换调度，造成的多个线程同时执行的假象；多核CPU可以真的多线程</li><li>多线程是为了同步完成多项任务</li></ul><h2 id="_3-多线程的优点和缺点" tabindex="-1"><a class="header-anchor" href="#_3-多线程的优点和缺点" aria-hidden="true">#</a> 3. 多线程的优点和缺点</h2><ul><li>优点</li></ul><p>适当提高程序的执行效率，适当提高资源利用率</p><ul><li>缺点</li></ul><p>开启线程需要内存空间，线程越多CPU的调度开销越大，线程之间的数据通信和共享更使得程序开发更加复杂</p><h2 id="_4-并行-和-并发" tabindex="-1"><a class="header-anchor" href="#_4-并行-和-并发" aria-hidden="true">#</a> 4. 并行 和 并发</h2><ul><li>并行：利用计算机的多核，在多个线程上同步进行</li><li>并发：在一条线程上快速切换，让人感觉在同步进行</li></ul><h2 id="_5-多线程方案" tabindex="-1"><a class="header-anchor" href="#_5-多线程方案" aria-hidden="true">#</a> 5. 多线程方案</h2><ul><li>Thread</li></ul><p>面向对象，需要手动创建但不需要手动销毁，线程通信困难</p><ul><li>GCD DispatchQueue</li></ul><p>充分利用设备多核，自动管理线程生命周期，比OperationQueue效率更高</p><ul><li>OperationQueue</li></ul><p>基于GCD的封装，更加面向对象</p><h2 id="_6-thread" tabindex="-1"><a class="header-anchor" href="#_6-thread" aria-hidden="true">#</a> 6. Thread</h2><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">import</span> <span class="token builtin">Foundation</span>\n\n<span class="token keyword">let</span> c1 <span class="token operator">=</span> <span class="token function">NSCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">let</span> c2 <span class="token operator">=</span> <span class="token function">NSCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">let</span> t1 <span class="token operator">=</span> <span class="token builtin">Thread</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">5</span> <span class="token punctuation">{</span>\n        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;t1&quot;</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span>\n        \n        <span class="token comment">//  t1输出两次之后开始等待</span>\n        <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">{</span>\n            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;t1 waiting......&quot;</span><span class="token punctuation">)</span>\n            \n            c1<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            c1<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            c1<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token comment">//  t1输出完毕之后，通知t2继续</span>\n    c2<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> t2 <span class="token operator">=</span> <span class="token builtin">Thread</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">5</span> <span class="token punctuation">{</span>\n        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;t2&quot;</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span>\n        \n        <span class="token comment">//  t2输出三次之后开始等待，并通知t1继续</span>\n        <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">{</span>\n            c1<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            \n            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;t2 waiting......&quot;</span><span class="token punctuation">)</span>\n            \n            c2<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            c2<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            c2<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nt1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nt2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">//  让主线程等待以看到所有输出，不然切换到主线程执行完毕就没有输出了</span>\n<span class="token builtin">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>forTimeInterval<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><h2 id="_7-gcd" tabindex="-1"><a class="header-anchor" href="#_7-gcd" aria-hidden="true">#</a> 7. GCD</h2><p>串行队列：队列中的任务按顺序执行 并行队列：队列中的任务并行执行 同步：阻塞，等到执行完毕 异步：非阻塞</p><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token comment">//GCD</span>\n\n<span class="token comment">//异步回到主线程执行闭包，同步会死锁</span>\n<span class="token builtin">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span>async <span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;main thread&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token comment">//异步串行执行闭包，保证queue内添加的闭包按添加顺序执行</span>\n<span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token function">DispatchQueue</span><span class="token punctuation">(</span>label<span class="token punctuation">:</span> <span class="token string">&quot;com.queue&quot;</span><span class="token punctuation">)</span>\nqueue<span class="token punctuation">.</span>async <span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nqueue<span class="token punctuation">.</span>async <span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nqueue<span class="token punctuation">.</span>async <span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token comment">//获取全局并行队列，异步并发执行闭包，不能保证闭包按顺序执行</span>\n<span class="token builtin">DispatchQueue</span><span class="token punctuation">.</span><span class="token function">global</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>async <span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token builtin">DispatchQueue</span><span class="token punctuation">.</span><span class="token function">global</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>async <span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token builtin">DispatchQueue</span><span class="token punctuation">.</span><span class="token function">global</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>async <span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token comment">//异步延时执行</span>\n<span class="token builtin">DispatchQueue</span><span class="token punctuation">.</span><span class="token function">global</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asyncAfter</span><span class="token punctuation">(</span>deadline<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">DispatchTimeInterval</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;execute after 3 seconds&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token comment">//群组操作</span>\n<span class="token keyword">let</span> group <span class="token operator">=</span> <span class="token function">DispatchGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token builtin">DispatchQueue</span><span class="token punctuation">.</span><span class="token function">global</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">async</span><span class="token punctuation">(</span>group<span class="token punctuation">:</span> group<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token builtin">DispatchQueue</span><span class="token punctuation">.</span><span class="token function">global</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">async</span><span class="token punctuation">(</span>group<span class="token punctuation">:</span> group<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token builtin">DispatchQueue</span><span class="token punctuation">.</span><span class="token function">global</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">async</span><span class="token punctuation">(</span>group<span class="token punctuation">:</span> group<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\ngroup<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span>queue<span class="token punctuation">:</span> <span class="token punctuation">.</span>main<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;all done&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token comment">//使用信号量同步执行异步并行队列的任务</span>\n<span class="token keyword">let</span> semaphore <span class="token operator">=</span> <span class="token function">DispatchSemaphore</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token number">5</span> <span class="token punctuation">{</span>\n    <span class="token comment">//wait semaphore-1</span>\n    <span class="token keyword">if</span> semaphore<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>timeout<span class="token punctuation">:</span> <span class="token punctuation">.</span>distantFuture<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">.</span>success <span class="token punctuation">{</span>\n        <span class="token builtin">DispatchQueue</span><span class="token punctuation">.</span><span class="token function">global</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>async <span class="token punctuation">{</span>\n            <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n            <span class="token comment">//signal semaphore+1</span>\n            semaphore<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br></div></div><h2 id="_8-operationqueue" tabindex="-1"><a class="header-anchor" href="#_8-operationqueue" aria-hidden="true">#</a> 8. OperationQueue</h2><div class="language-swift ext-swift line-numbers-mode"><pre class="language-swift"><code><span class="token keyword">import</span> <span class="token builtin">Foundation</span>\n\n<span class="token comment">//  切换到主线程</span>\n<span class="token builtin">OperationQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span>addOperation <span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;main thread&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//  串行</span>\n<span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token function">OperationQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nqueue<span class="token punctuation">.</span>addBarrierBlock <span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nqueue<span class="token punctuation">.</span>addBarrierBlock <span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nqueue<span class="token punctuation">.</span>addBarrierBlock <span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//  并行</span>\n<span class="token keyword">let</span> queueConcurrent <span class="token operator">=</span> <span class="token function">OperationQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nqueueConcurrent<span class="token punctuation">.</span>addOperation <span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nqueueConcurrent<span class="token punctuation">.</span>addOperation <span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nqueueConcurrent<span class="token punctuation">.</span>addOperation <span class="token punctuation">{</span>\n    <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div>',29),t={render:function(n,s){return p}}}}]);